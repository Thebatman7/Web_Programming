/*Resetting default box behavior.*/
* {
    margin: 0;
    padding: 0;
    background-color: #200A2F;
    box-sizing: border-box;
    font-family: "Century Gothic", CenturyGothic, AppleGothic, sans-serif; font-size: 22px; font-style: normal; font-variant: normal; font-weight: 600; line-height: 26.4px; } h3 { font-family: "Century Gothic", CenturyGothic, AppleGothic, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: 700; line-height: 15.4px; } p { font-family: "Century Gothic", CenturyGothic, AppleGothic, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: 400; line-height: 20px; } blockquote { font-family: "Century Gothic", CenturyGothic, AppleGothic, sans-serif; font-size: 21px; font-style: normal; font-variant: normal; font-weight: 400; line-height: 30px; } pre { font-family: "Century Gothic", CenturyGothic, AppleGothic, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: 400; line-height: 18.5714px;
  }

/* Nav Bar */
.bg-light {
  background-color: #200A2F !important;
}
.nav-link {
  color: #6cb88b !important;
  font-family: "Century Gothic", CenturyGothic, AppleGothic, sans-serif; font-size: 22px; font-style: normal; font-variant: normal; font-weight: 700; line-height: 26.4px; } h3 { font-family: "Century Gothic", CenturyGothic, AppleGothic, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: 700; line-height: 15.4px; } p { font-family: "Century Gothic", CenturyGothic, AppleGothic, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: 400; line-height: 20px; } blockquote { font-family: "Century Gothic", CenturyGothic, AppleGothic, sans-serif; font-size: 21px; font-style: normal; font-variant: normal; font-weight: 400; line-height: 30px; } pre { font-family: "Century Gothic", CenturyGothic, AppleGothic, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: 400; line-height: 18.5714px;
}
.navbar {
  /* border: 6px solid #2fcf4a; */
  height: 12vh ;
  width: auto;
  padding: 0px 25px; /*Default top, bottom, left, and right padding was a lot. */
}
.logo {
  width: min(10vw, 200px); /*Needed to make logo responsive. Without it logo overlaps navbar.*/
}
.navbar-collapse {
  background-color: #200A2F !important;
}
.navbar-nav {
  font-weight: 0!important;;
}
.nav-link:hover {
  background-color: #56c49f3b !important;
}
#weatherSubmit:hover {
  background-color: #56c49f3b !important;
}

.source {
  border: 1px solid #2fcf4a98;
  border-radius: 5px;
  background-color: #200A2F !important;
}








.footer {
  /* border: 2px solid rgb(209, 65, 8); */
  display: fixed;
  justify-content: space-between;
  width: 100%;
  padding-top: 0.25em;
  padding-bottom: 0.25em;
  background-color: #200A2F;
}

.footer-item {
  background-color: #200A2F;
  flex: 1;
  align-items: center;
  text-align: center;
  display: inline-block;
  justify-content: center;
  margin-left: 2vh;
  margin-right: 2vh;
}

.fab { 
  color: #a284b4;
  background-color: #200A2F;
  vertical-align: middle;
  font-size: 1em;
}
.fab:hover {
  color:#2fcf4a;
}

   
/*
Flexbox gave us a ton of amazing new tools for laying out a web page. Compare these techniques to what we were able to do with floats, and it should be pretty clear that flexbox is a cleaner option for laying out modern websites:

Use display: flex; to create a flex container.
Use justify-content to define the horizontal alignment of items.
Use align-items to define the vertical alignment of items.
Use flex-direction if you need columns instead of rows.
Use the row-reverse or column-reverse values to flip item order.
Use order to customize the order of individual elements.
Use align-self to vertically align individual items.
Use flex to create flexible boxes that can stretch and shrink.
*/
  
/*
Flexbox uses two types of boxes that we’ve never seen before: “flex containers” and “flex items”. 
The job of a flex container is to group a bunch of flex items together and define how they’re positioned.
Every HTML element that’s a direct child of a flex container is an “item”. Flex items can be manipulated individually,
but for the most part, it’s up to the container to determine their layout.
*/
 /*----------------------------------------------------------------------------------------------*/

/*
“Responsive design” refers to the idea that your website should display equally well in everything from widescreen monitors to mobile phones.
It’s an approach to web design and development that eliminates the distinction between the mobile-friendly version of your website and its desktop counterpart. 
Media queries always begin with the @media “at-rule” followed by some kind of conditional statement, and then some curly braces.
Inside the curly braces, you put a bunch of ordinary CSS rules.
The browser only pays attention to those rules if the condition is met.
*/
/* Mobile Styles */
@media only screen and (max-width: 600px) {
  body {
    background-color: #250e35;
  }
  .uno h1 {
    font-size: 0.7em;
  }
  .dos h2 {
    font-size: 0.9em;
  }
  .tres h3 {
    font-size: 0.9em;
  }

  .intro-body p {
    font-size: 0.7em;
  }

  .intro-container {
    height: inherit;
  }
  .explore-container a{
    size: 5em;
    font-size: 0.8em;
  }

  /* .footer {
    position: relative;
  } */
  /* .footer {
    display:none;
  } */

  .copyright {
    display: none;
  }
}



/* Tablet Styles */
@media only screen and (min-width: 401px) and (max-width: 960px) {
    body {
        background-color: #331149;
    }
}

/* Desktop Styles */
@media only screen and (min-width: 961px) {
  body {
    /* background-color: #ffffff; */
  }
}

